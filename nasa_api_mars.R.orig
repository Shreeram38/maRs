## NASA API Mars Weather Report
## KT Hobbs & Claudia Nikel & Shreeram Murali

#-------------------------------
#### Import libraries and data
#-------------------------------

library('jsonlite')
library('purrr')
library('dplyr')
library('tidyr')
library('plotly')

space_data<-function(APIkey){
  req <- paste("https://api.nasa.gov/insight_weather/?api_key=", as.character(APIkey), "&feedtype=json&ver=1.0", sep = "")
  mars <- fromJSON(req)
  
  mars<-(map(mars[1:7], ~unlist(.x[1:6]) %>%
      bind_rows) %>%
    bind_rows(.id = "day") %>%
    pivot_longer(cols = grep("\\.", names(.)), names_sep = "\\.", names_to = c(".value", "var")))

  mars.av <- subset(mars, var == 'av')
  
  trace_0 <- mars.av$AT
  trace_1 <- mars.av$HWS
  trace_2 <- mars.av$PRE
  x <- mars.av$day
  data <- data.frame(x, trace_0, trace_1, trace_2)
  
  p <- plot_ly(data, x = ~x, y = ~trace_0, name = 'Atmospheric Temperature', type = 'scatter', mode = 'lines+markers') %>%
    add_trace(y = ~trace_1, name = 'Horizontal Wind Speed', mode = 'lines+markers') %>%
    add_trace(y = ~trace_2, name = 'Atmospheric Pressure', mode = 'lines+markers') %>%
    layout(title = "Weekly Weather Summary on Mars", xaxis = list(title = "Days"), yaxis = list(title = " "))
  
  p
  


}

space_data("hecLCNM6NcwAGgGGWSW2xovr0SyYuXiOShVw6GxS")
mars.df<-space_data("hecLCNM6NcwAGgGGWSW2xovr0SyYuXiOShVw6GxS")

########################
# plot windspeeds for one sol
# black bar is the average, corresponding to the black text
# green background is the sol's range (min and max)
# red or green text below is relative to the previous sol's average

windspeed <- function(sol){
  
<<<<<<< HEAD
  # average
  refsol <- as.character(as.numeric(sol)-1)
  sol.av <- subset(mars.df, mars.df$day == sol & mars.df$var == 'av')$HWS
  ref.av <- subset(mars.df, mars.df$day == refsol & mars.df$var == 'av')$HWS
  
  
  # max
  sol.mx <- subset(mars.df, mars.df$day == sol & mars.df$var == 'mx')$HWS
  
  
  # min
  sol.mn <- subset(mars.df, mars.df$day == sol & mars.df$var == 'mn')$HWS
  
  
  p <- plot_ly(
    domain = list(x = c(0, 1), y = c(0, 1)),
    value = sol.av,
    delta = list(reference = ref.av),
    title = list(text = paste("Wind Speeds for Sol", sol, sep = " ")),
    type = "indicator",
    mode = "gauge+number+delta",
    gauge = list(
      bar = list(color = "royalblue"),
      bgcolor = "white",
      borderwidth = 2,
      bordercolor = "gray",
      threshold = list(
        line = list(color = "red", width = 4),
        thickness = 0.75,
        value = sol.mx),
      threshold = list(
        line = list(color = "green", width = 4),
        thickness = 0.75,
        value = sol.mn)
    )) %>%
    layout(margin = list(l=15,r=30))
  
=======
    # average
    sol.av <- subset(mars.df, mars.df$day == sol & mars.df$var == 'av')$HWS
    
    # max
    sol.mx <- subset(mars.df, mars.df$day == sol & mars.df$var == 'mx')$HWS
    
    # min
    sol.mn <- subset(mars.df, mars.df$day == sol & mars.df$var == 'mn')$HWS
    
    # list of sols to filter plots by
    listofsols <- list()
    for (i in 1:7) {
      listofsols[i] <- as.numeric(unique(mars.df$day))[i]
    }
    listofsols
    
    
    
    if (length(subset(mars.df$day, mars.df$day == as.numeric(sol)-1) != 0)) {
    # reference sol, the day before
      refsol <- as.character(as.numeric(sol)-1)
      ref.av <- subset(mars.df, mars.df$day == refsol & mars.df$var == 'av')$HWS
    
      p <- plot_ly(
        domain = list(x = c(0, 1), y = c(0, 1)),
        value = sol.av,
        delta = list(reference = ref.av),
        title = list(text = paste("Horizontal Wind Speeds (m/s) \n for Sol", sol, sep = " "), font = list(size = 20)),
        type = "indicator",
        mode = "gauge+number+delta",
        gauge = list(
          axis = list(range = list(NULL, 25), tickwidth = 1),
          bar = list(color = "darkgreen"),
          bgcolor = "white",
          steps = list(
            list(range = c(sol.mn, sol.mx), color = "lightgreen")),
          threshold = list(
            line = list(color = "black", width = 1),
            thickness = 0.75,
            value = sol.av)
        )) %>%
        layout(margin = list(l=15,r=30))
      
    } else if (listofsols[1] == as.numeric(sol)) {
      
      p <- plot_ly(
        domain = list(x = c(0, 1), y = c(0, 1)),
        value = sol.av,
        title = list(text = paste("Horizontal Wind Speeds (m/s) \n for Sol", sol, sep = " "), font = list(size = 20)),
        type = "indicator",
        mode = "gauge+number",
        gauge = list(
          axis = list(range = list(NULL, 25), tickwidth = 1),
          bar = list(color = "darkgreen"),
          bgcolor = "white",
          steps = list(
            list(range = c(sol.mn, sol.mx), color = "lightgreen")),
          threshold = list(
            line = list(color = "black", width = 1),
            thickness = 0.75,
            value = sol.av)
        )
        ) %>%
        layout(margin = list(l=15,r=30))
      
    } else {
      listofsols <- list(as.numeric(unique(mars.df$day)))
      print(c("Please select one of the sol numbers from the last seven sols: " = listofsols))
    }
}

w <- windspeed(407)
w



# plot pressure for one sol
# black bar is the average, corresponding to the black text
# orange background is the sol's range (min and max)
# red or green text below is relative to the previous sol's average

pressure <- function(sol){
  
  # average
  sol.av <- subset(mars.df, mars.df$day == sol & mars.df$var == 'av')$PRE
  
  # max
  sol.mx <- subset(mars.df, mars.df$day == sol & mars.df$var == 'mx')$PRE
 
  # min
  sol.mn <- subset(mars.df, mars.df$day == sol & mars.df$var == 'mn')$PRE
  
  # list of sols to filter plots by
  listofsols <- list()
  for (i in 1:7) {
    listofsols[i] <- as.numeric(unique(mars.df$day))[i]
  }
  listofsols
  
  
  
  if (length(subset(mars.df$day, mars.df$day == as.numeric(sol)-1) != 0)) {
    # reference sol, the day before
    refsol <- as.character(as.numeric(sol)-1)
    ref.av <- subset(mars.df, mars.df$day == refsol & mars.df$var == 'av')$PRE
    
    p <- plot_ly(
      domain = list(x = c(0, 1), y = c(0, 1)),
      value = sol.av,
      delta = list(reference = ref.av),
      title = list(text = paste("Pressure (Pa) for Sol", sol, sep = " "), font = list(size = 20)),
      type = "indicator",
      mode = "gauge+number+delta",
      gauge = list(
        axis = list(range = list(NULL, 700), tickwidth = 1),
        bar = list(color = "#E6843E"),
        bgcolor = "white",
        steps = list(
          list(range = c(sol.mn, sol.mx), color = "#EEE0D6")),
        threshold = list(
          line = list(color = "black", width = 1),
          thickness = 0.75,
          value = sol.av)
      )) %>%
      layout(margin = list(l=15,r=30))
    
  } else if (listofsols[1] == as.numeric(sol)) {
    
    p <- plot_ly(
      domain = list(x = c(0, 1), y = c(0, 1)),
      value = sol.av,
      title = list(text = paste("Pressure (Pa) for Sol", sol, sep = " "), font = list(size = 20)),
      type = "indicator",
      mode = "gauge+number",
      gauge = list(
        axis = list(range = list(NULL, 700), tickwidth = 1),
        bar = list(color = "#E6843E"),
        bgcolor = "white",
        steps = list(
          list(range = c(sol.mn, sol.mx), color = "#EEE0D6")),
        threshold = list(
          line = list(color = "black", width = 1),
          thickness = 0.75,
          value = sol.av)
      )
    ) %>%
      layout(margin = list(l=15,r=30))
    
  } else {
    listofsols <- list(as.numeric(unique(mars.df$day)))
    print(c("Please select one of the sol numbers from the last seven sols: " = listofsols))
  }
>>>>>>> ktbranch
}

p <- pressure(408)
p



# plot atmospheric temp for one sol
# black bar is the average, corresponding to the black text
# blue background is the sol's range (min and max)
# red or green text below is relative to the previous sol's average

temperature <- function(sol){
  
  # average
  sol.av <- subset(mars.df, mars.df$day == sol & mars.df$var == 'av')$AT
  
  # max
  sol.mx <- subset(mars.df, mars.df$day == sol & mars.df$var == 'mx')$AT
  
  # min
  sol.mn <- subset(mars.df, mars.df$day == sol & mars.df$var == 'mn')$AT
  
  # convert farhenheit to celsius
  sol.av <- (as.numeric(sol.av) - 32) * 5/9
  sol.mx <- (as.numeric(sol.mx) - 32) * 5/9
  sol.mn <- (as.numeric(sol.mn) - 32) * 5/9
  
  
  # list of sols to filter plots by
  listofsols <- list()
  for (i in 1:7) {
    listofsols[i] <- as.numeric(unique(mars.df$day))[i]
  }
  listofsols
  
  
  
  if (length(subset(mars.df$day, mars.df$day == as.numeric(sol)-1) != 0)) {
    # reference sol, the day before
    refsol <- as.character(as.numeric(sol)-1)
    ref.av <- subset(mars.df, mars.df$day == refsol & mars.df$var == 'av')$AT
    
    p <- plot_ly(
      value = sol.av,
      delta = list(reference = ref.av),
      title = list(text = paste("Atmospheric Temperature (°C) \n for Sol", sol, sep = " "), font = list(size = 20)),
      type = "indicator",
      mode = "gauge+number+delta",
      gauge = list(
        axis = list(range = list(NULL, 700), tickwidth = 1),
        bar = list(color = "royalblue"),
        bgcolor = "white",
        steps = list(
          list(range = c(sol.mn, sol.mx), color = "#E0E6F2")),
        threshold = list(
          line = list(color = "black", width = 1),
          thickness = 0.75,
          value = sol.av)
      )) %>%
      layout(margin = list(l=15,r=30))
    
  } else if (listofsols[1] == as.numeric(sol)) {
    
    p <- plot_ly(
      value = sol.av,
      title = list(text = paste("Atmospheric Temperature (°C) \n for Sol", sol, sep = " "), font = list(size = 20)),
      type = "indicator",
      mode = "gauge+number",
      gauge = list(
        axis = list(range = list(-100, 0), tickwidth = 1),
        bar = list(color = "royalblue"),
        bgcolor = "white",
        steps = list(
          list(range = c(sol.mn, sol.mx), color = "#E0E6F2")),
        threshold = list(
          line = list(color = "black", width = 1),
          thickness = 0.75,
          value = sol.av)
      )
    ) %>%
      layout(margin = list(l=15,r=30))
    
  } else {
    listofsols <- list(as.numeric(unique(mars.df$day)))
    print(c("Please select one of the sol numbers from the last seven sols: " = listofsols))
  }
}

t <- temperature(405)
t
