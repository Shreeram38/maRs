value = sol.av)
)) %>%
layout(margin = list(l=15,r=30))
} else if (listofsols[1] == as.numeric(sol)) {
p <- plot_ly(
value = sol.av,
title = list(text = paste("Atmospheric Temperature (C) \n for Sol", sol, sep = " "), font = list(size = 20)),
type = "indicator",
mode = "gauge+number",
gauge = list(
axis = list(range = list(-100, 500), tickwidth = 1),
bar = list(color = "royalblue"),
bgcolor = "white",
steps = list(
list(range = c(sol.mn, sol.mx), color = "#E0E6F2")),
threshold = list(
line = list(color = "black", width = 1),
thickness = 0.75,
value = sol.av)
)
) %>%
layout(margin = list(l=15,r=30))
} else {
listofsols <- list(as.numeric(unique(mars.df$day)))
print(c("Please select one of the sol numbers from the last seven sols: " = listofsols))
}
}
#x<-marsInfo("hecLCNM6NcwAGgGGWSW2xovr0SyYuXiOShVw6GxS")
t<-temperature(420, marsInfo("hecLCNM6NcwAGgGGWSW2xovr0SyYuXiOShVw6GxS"))
t
temperature <- function(sol, mars.df){
# average
sol.av <- subset(mars.df, mars.df$day == sol & mars.df$var == 'av')$AT
# max
sol.mx <- subset(mars.df, mars.df$day == sol & mars.df$var == 'mx')$AT
# min
sol.mn <- subset(mars.df, mars.df$day == sol & mars.df$var == 'mn')$AT
# convert farhenheit to celsius
sol.av <- (as.numeric(sol.av) - 32) * 5/9
sol.mx <- (as.numeric(sol.mx) - 32) * 5/9
sol.mn <- (as.numeric(sol.mn) - 32) * 5/9
# list of sols to filter plots by
# testing that the correct sol was chosen
listofsols <- list()
for (i in 1:7) {
listofsols[i] <- as.numeric(unique(mars.df$day))[i]
}
listofsols
if (length(subset(mars.df$day, mars.df$day == as.numeric(sol)-1) != 0)) {
# reference sol, the day before
refsol <- as.character(as.numeric(sol)-1)
ref.av <- subset(mars.df, mars.df$day == refsol & mars.df$var == 'av')$AT
p <- plot_ly(
value = sol.av,
delta = list(reference = ref.av),
title = list(text = paste("Atmospheric Temperature (C) \n for Sol", sol, sep = " "), font = list(size = 20)),
type = "indicator",
mode = "gauge+number+delta",
gauge = list(
axis = list(range = list(-100, 100), tickwidth = 1),
bar = list(color = "royalblue"),
bgcolor = "white",
steps = list(
list(range = c(sol.mn, sol.mx), color = "#E0E6F2")),
threshold = list(
line = list(color = "black", width = 1),
thickness = 0.75,
value = sol.av)
)) %>%
layout(margin = list(l=15,r=30))
} else if (listofsols[1] == as.numeric(sol)) {
p <- plot_ly(
value = sol.av,
title = list(text = paste("Atmospheric Temperature (C) \n for Sol", sol, sep = " "), font = list(size = 20)),
type = "indicator",
mode = "gauge+number",
gauge = list(
axis = list(range = list(-100, 100), tickwidth = 1),
bar = list(color = "royalblue"),
bgcolor = "white",
steps = list(
list(range = c(sol.mn, sol.mx), color = "#E0E6F2")),
threshold = list(
line = list(color = "black", width = 1),
thickness = 0.75,
value = sol.av)
)
) %>%
layout(margin = list(l=15,r=30))
} else {
listofsols <- list(as.numeric(unique(mars.df$day)))
print(c("Please select one of the sol numbers from the last seven sols: " = listofsols))
}
}
#x<-marsInfo("hecLCNM6NcwAGgGGWSW2xovr0SyYuXiOShVw6GxS")
t<-temperature(420, marsInfo("hecLCNM6NcwAGgGGWSW2xovr0SyYuXiOShVw6GxS"))
t
windspeed <- function(sol, mars.df){
# average
sol.av <- subset(mars.df, mars.df$day == sol & mars.df$var == 'av')$HWS
# max
sol.mx <- subset(mars.df, mars.df$day == sol & mars.df$var == 'mx')$HWS
# min
sol.mn <- subset(mars.df, mars.df$day == sol & mars.df$var == 'mn')$HWS
# list of sols to filter plots by
# testing that the correct sol was chosen
listofsols <- list()
for (i in 1:7) {
listofsols[i] <- as.numeric(unique(mars.df$day))[i]
}
listofsols
if (length(subset(mars.df$day, mars.df$day == as.numeric(sol)-1) != 0)) {
# reference sol, the day before
refsol <- as.character(as.numeric(sol)-1)
ref.av <- subset(mars.df, mars.df$day == refsol & mars.df$var == 'av')$HWS
p <- plot_ly(
domain = list(x = c(0, 1), y = c(0, 1)),
value = sol.av,
delta = list(reference = ref.av),
title = list(text = paste("Horizontal Wind Speeds (m/s) \n for Sol", sol, sep = " "), font = list(size = 20)),
type = "indicator",
mode = "gauge+number+delta",
gauge = list(
axis = list(range = list(NULL, 25), tickwidth = 1),
bar = list(color = "darkgreen"),
bgcolor = "white",
steps = list(
list(range = c(sol.mn, sol.mx), color = "lightgreen")),
threshold = list(
line = list(color = "black", width = 1),
thickness = 0.75,
value = sol.av)
)) %>%
layout(margin = list(l=15,r=30))
} else if (listofsols[1] == as.numeric(sol)) {
p <- plot_ly(
domain = list(x = c(0, 1), y = c(0, 1)),
value = sol.av,
title = list(text = paste("Horizontal Wind Speeds (m/s) \n for Sol", sol, sep = " "), font = list(size = 20)),
type = "indicator",
mode = "gauge+number",
gauge = list(
axis = list(range = list(NULL, 25), tickwidth = 1),
bar = list(color = "darkgreen"),
bgcolor = "white",
steps = list(
list(range = c(sol.mn, sol.mx), color = "lightgreen")),
threshold = list(
line = list(color = "black", width = 1),
thickness = 0.75,
value = sol.av)
)
) %>%
layout(margin = list(l=15,r=30))
} else {
listofsols <- list(as.numeric(unique(mars.df$day)))
print(c("Please select one of the sol numbers from the last seven sols: " = listofsols))
}
}
w<-windspeed(415, marsInfo("hecLCNM6NcwAGgGGWSW2xovr0SyYuXiOShVw6GxS"))
w
w<-windspeed(418, marsInfo("hecLCNM6NcwAGgGGWSW2xovr0SyYuXiOShVw6GxS"))
w
x<-marsInfo("hecLCNM6NcwAGgGGWSW2xovr0SyYuXiOShVw6GxS")
x
#without graph
s<-marsAverage(x, graph=NULL)
marsAverage<-function(mars.df, graph=NULL){
#takes on subset of df with averages
mars.av<-subset(mars.df, var == 'av')
#rename df columns
atm_temp<-mars.av$AT
horiz_windspeed<-mars.av$HWS
atm_pres<-mars.av$PRE
sol<-mars.av$day
marsdata<-data.frame(sol, atm_temp, horiz_windspeed, atm_pres)
#returns df of weekly averages
return(marsdata)
#checks to see of optional graph parameter is NULL
if (is.null(graph)){
}
else {
#plots 3 line graphs of the temperature (blue), wind speed (orange) and atmospheric pressure (green) of mars for the last 7 sols
p<-plot_ly(marsdata, x=~sol, y=~atm_temp, name='Atmospheric Temperature', type='scatter', mode='lines+markers') %>%
add_trace(y=~horiz_windspeed, name='Horizontal Wind Speed', mode='lines+markers') %>%
add_trace(y=~atm_pres, name='Atmospheric Pressure', mode='lines+markers') %>%
layout(title = "Weekly Weather Summary on Mars", xaxis = list(title = "Sol"), yaxis = list(title = " "))
p
}
}
#without graph
s<-marsAverage(x, graph=NULL)
s
q<-marsAverage(x, graph=TRUE)
q
q
# Set up matrix for results
result = matrix(NA, nrow=10, ncol=2)
colnames(result) <- c("No. Hidden Var.", "MSE")
# Run loops for different hidden layer variable numbers
for(i in 1:10){
result[i,1] = i
# generate neural net with samples
sfish.nnet2 <- nnet(X3.770~., data = fish, size = i) # i hidden layer variables
# MSE
result[i,2] = mean((predict(sfish.nnet2, fish[,7])-fish[,7])^2)
}
fishdata <- read.csv('/Users/kt/Documents/UBC_MDS/block4/572/data_572/data/fish_toxicity.csv', sep = ";")
# Run loops for different hidden layer variable numbers
for(i in 1:10){
result[i,1] = i
# generate neural net with samples
sfish.nnet2 <- nnet(X3.770~., data = fishdata, size = i) # i hidden layer variables
# MSE
result[i,2] = mean((predict(sfish.nnet2, fishdata[,7])-fishdata[,7])^2)
}
colnames(fishdata)
colnames(fishdata[7])
# Run loops for different hidden layer variable numbers
for(i in 1:10){
result[i,1] = i
# generate neural net with samples
sfish.nnet2 <- nnet(X3.770~., data = fishdata, size = i) # i hidden layer variables
# MSE
result[i,2] = mean((predict(sfish.nnet2, fishdata[,7])-fishdata[,7])^2)
}
# Run loops for different hidden layer variable numbers
for(i in 1:10){
result[i,1] = i
# generate neural net with samples
sfish.nnet2 <- nnet(X3.770~., data = fishdata, size = i) # i hidden layer variables
# MSE
result[i,2] = mean((predict(sfish.nnet2, fishdata)-fishdata[,7])^2)
}
result
# Set up matrix for results
result = matrix(NA, nrow=10, ncol=2)
colnames(result) <- c("No. Hidden Var.", "MSE")
# Run loops for different hidden layer variable numbers
for(i in 1:10){
result[i,1] = i
# generate neural net with samples
sfish.nnet2 <- nnet(X3.770~., data = fishdata, size = i, linout = T)
# i hidden layer variables, linear output
# MSE
result[i,2] = mean((predict(sfish.nnet2, fishdata)-fishdata[,7])^2)
}
result
t <- temperature(400, df)
t <- temperature(400, mars.df)
t <- temperature(419, mars.df)
t
p <- pressure(419, mars.df)
p
w <- windspeed(419, mars.df)
w
mars.df
mars.df$First_UTC
marsAverage(mars.df, graph = TRUE)
m <- marsAverage(mars.df, graph = TRUE)
m
mars.df
library(shiny)
runApp('~/Documents/UBC_MDS/block3/550/miniposter/maRs')
library(maRs)
mars.df <- marsInf("hecLCNM6NcwAGgGGWSW2xovr0SyYuXiOShVw6GxS")
mars.df <- marsInfo("hecLCNM6NcwAGgGGWSW2xovr0SyYuXiOShVw6GxS")
runApp('~/Documents/UBC_MDS/block3/550/miniposter/maRs')
library(plotly)
t <- temperature(420, mars.df)
t
runApp('~/Documents/UBC_MDS/block3/550/miniposter/maRs')
runApp('~/Documents/UBC_MDS/block3/550/miniposter/maRs')
output$plots <- renderPlotly({
if (input$param == "Temperature"){
# generate bins based on input$bins from ui.R
t <- temperature(420, mars.df)
t
} else if (input$param == "Pressure"){
p <- pressure(input$sol, mars.df)
ggploty(p)
} else if (input$param == "Windspeed"){
w <- windspeed(input$sol, mars.df)
ggplotly(w)
}
})
if (input$param == "Temperature"){
# generate bins based on input$bins from ui.R
t <- temperature(420, mars.df)
t
} else if (input$param == "Pressure"){
p <- pressure(input$sol, mars.df)
ggploty(p)
} else if (input$param == "Windspeed"){
w <- windspeed(input$sol, mars.df)
ggplotly(w)
}
runApp('~/Documents/UBC_MDS/block3/550/miniposter/maRs')
runApp('~/Documents/UBC_MDS/block3/550/miniposter/maRs')
runApp()
runApp('~/Documents/UBC_MDS/block3/550/miniposter/maRs')
runApp('~/Documents/UBC_MDS/block3/550/miniposter/maRs')
runApp('~/Documents/UBC_MDS/block3/550/miniposter/maRs')
runApp('~/Documents/UBC_MDS/block3/550/miniposter/maRs')
runApp()
runApp('~/Documents/UBC_MDS/block3/550/miniposter/maRs')
runApp()
runApp('~/Documents/UBC_MDS/block3/550/miniposter/maRs')
runApp('~/Documents/UBC_MDS/block3/550/miniposter/maRs')
runApp('~/Documents/UBC_MDS/block3/550/miniposter/maRs')
runApp('~/Documents/UBC_MDS/block3/550/miniposter/maRs')
runApp('~/Documents/UBC_MDS/block3/550/miniposter/maRs')
runApp('~/Documents/UBC_MDS/block3/550/miniposter/maRs')
temperature <- function(sol, mars.df){
# average
sol.av <- subset(mars.df, mars.df$day == sol & mars.df$var == 'av')$AT
# max
sol.mx <- subset(mars.df, mars.df$day == sol & mars.df$var == 'mx')$AT
# min
sol.mn <- subset(mars.df, mars.df$day == sol & mars.df$var == 'mn')$AT
# convert farhenheit to celsius
sol.av <- (as.numeric(sol.av) - 32) * 5/9
sol.mx <- (as.numeric(sol.mx) - 32) * 5/9
sol.mn <- (as.numeric(sol.mn) - 32) * 5/9
# list of sols to filter plots by
# testing that the correct sol was chosen
listofsols <- list()
for (i in 1:7) {
listofsols[i] <- as.numeric(unique(mars.df$day))[i]
}
listofsols
if (length(subset(mars.df$day, mars.df$day == as.numeric(sol)-1) != 0)) {
# reference sol, the day before
refsol <- as.character(as.numeric(sol)-1)
ref.av <- subset(mars.df, mars.df$day == refsol & mars.df$var == 'av')$AT
p <- plot_ly(
value = sol.av,
delta = list(reference = ref.av),
title = list(text = paste("Atmospheric Temperature (C) \n for Sol", sol, sep = " "), font = list(size = 16)),
type = "indicator",
mode = "gauge+number+delta",
gauge = list(
axis = list(range = list(-100, 100), tickwidth = 1),
bar = list(color = "royalblue"),
bgcolor = "white",
steps = list(
list(range = c(sol.mn, sol.mx), color = "#E0E6F2")),
threshold = list(
line = list(color = "black", width = 1),
thickness = 0.75,
value = sol.av)
)) %>%
layout(margin = list(l=15,r=30))
} else if (listofsols[1] == as.numeric(sol)) {
p <- plot_ly(
value = sol.av,
title = list(text = paste("Atmospheric Temperature (C) \n for Sol", sol, sep = " "), font = list(size = 16)),
type = "indicator",
mode = "gauge+number",
gauge = list(
axis = list(range = list(-100, 100), tickwidth = 1),
bar = list(color = "royalblue"),
bgcolor = "white",
steps = list(
list(range = c(sol.mn, sol.mx), color = "#E0E6F2")),
threshold = list(
line = list(color = "black", width = 1),
thickness = 0.75,
value = sol.av)
)
) %>%
layout(margin = list(l=15,r=30))
} else {
listofsols <- list(as.numeric(unique(mars.df$day)))
print(c("Please select one of the sol numbers from the last seven sols: " = listofsols))
}
}
#x<-marsInfo("hecLCNM6NcwAGgGGWSW2xovr0SyYuXiOShVw6GxS")
t<-temperature(420, marsInfo("hecLCNM6NcwAGgGGWSW2xovr0SyYuXiOShVw6GxS"))
t
runApp('~/Documents/UBC_MDS/block3/550/miniposter/maRs')
windspeed <- function(sol, mars.df){
# average
sol.av <- subset(mars.df, mars.df$day == sol & mars.df$var == 'av')$HWS
# max
sol.mx <- subset(mars.df, mars.df$day == sol & mars.df$var == 'mx')$HWS
# min
sol.mn <- subset(mars.df, mars.df$day == sol & mars.df$var == 'mn')$HWS
# list of sols to filter plots by
# testing that the correct sol was chosen
listofsols <- list()
for (i in 1:7) {
listofsols[i] <- as.numeric(unique(mars.df$day))[i]
}
listofsols
if (length(subset(mars.df$day, mars.df$day == as.numeric(sol)-1) != 0)) {
# reference sol, the day before
refsol <- as.character(as.numeric(sol)-1)
ref.av <- subset(mars.df, mars.df$day == refsol & mars.df$var == 'av')$HWS
p <- plot_ly(
domain = list(x = c(0, 1), y = c(0, 1)),
value = sol.av,
delta = list(reference = ref.av),
title = list(text = paste("Horizontal Wind Speeds (m/s) \n for Sol", sol, sep = " "), font = list(size = 16)),
type = "indicator",
mode = "gauge+number+delta",
gauge = list(
axis = list(range = list(NULL, 25), tickwidth = 1),
bar = list(color = "darkgreen"),
bgcolor = "white",
steps = list(
list(range = c(sol.mn, sol.mx), color = "lightgreen")),
threshold = list(
line = list(color = "black", width = 1),
thickness = 0.75,
value = sol.av)
)) %>%
layout(margin = list(l=15,r=30))
} else if (listofsols[1] == as.numeric(sol)) {
p <- plot_ly(
domain = list(x = c(0, 1), y = c(0, 1)),
value = sol.av,
title = list(text = paste("Horizontal Wind Speeds (m/s) \n for Sol", sol, sep = " "), font = list(size = 16)),
type = "indicator",
mode = "gauge+number",
gauge = list(
axis = list(range = list(NULL, 25), tickwidth = 1),
bar = list(color = "darkgreen"),
bgcolor = "white",
steps = list(
list(range = c(sol.mn, sol.mx), color = "lightgreen")),
threshold = list(
line = list(color = "black", width = 1),
thickness = 0.75,
value = sol.av)
)
) %>%
layout(margin = list(l=15,r=30))
} else {
listofsols <- list(as.numeric(unique(mars.df$day)))
print(c("Please select one of the sol numbers from the last seven sols: " = listofsols))
}
}
w<-windspeed(418, marsInfo("hecLCNM6NcwAGgGGWSW2xovr0SyYuXiOShVw6GxS"))
w
runApp('~/Documents/UBC_MDS/block3/550/miniposter/maRs')
pressure <- function(sol, mars.df){
# average
sol.av <- subset(mars.df, mars.df$day == sol & mars.df$var == 'av')$PRE
# max
sol.mx <- subset(mars.df, mars.df$day == sol & mars.df$var == 'mx')$PRE
# min
sol.mn <- subset(mars.df, mars.df$day == sol & mars.df$var == 'mn')$PRE
# list of sols to filter plots by
# testing that the correct sol was chosen
listofsols <- list()
for (i in 1:7) {
listofsols[i] <- as.numeric(unique(mars.df$day))[i]
}
listofsols
if (length(subset(mars.df$day, mars.df$day == as.numeric(sol)-1) != 0)) {
# reference sol, the day before
refsol <- as.character(as.numeric(sol)-1)
ref.av <- subset(mars.df, mars.df$day == refsol & mars.df$var == 'av')$PRE
p <- plot_ly(
domain = list(x = c(0, 1), y = c(0, 1)),
value = sol.av,
delta = list(reference = ref.av),
title = list(text = paste("Pressure (Pa) for Sol", sol, sep = " "), font = list(size = 16)),
type = "indicator",
mode = "gauge+number+delta",
gauge = list(
axis = list(range = list(NULL, 700), tickwidth = 1),
bar = list(color = "#E6843E"),
bgcolor = "white",
steps = list(
list(range = c(sol.mn, sol.mx), color = "#EEE0D6")),
threshold = list(
line = list(color = "black", width = 1),
thickness = 0.75,
value = sol.av)
)) %>%
layout(margin = list(l=15,r=30))
} else if (listofsols[1] == as.numeric(sol)) {
p <- plot_ly(
domain = list(x = c(0, 1), y = c(0, 1)),
value = sol.av,
title = list(text = paste("Pressure (Pa) for Sol", sol, sep = " "), font = list(size = 16)),
type = "indicator",
mode = "gauge+number",
gauge = list(
axis = list(range = list(NULL, 700), tickwidth = 1),
bar = list(color = "#E6843E"),
bgcolor = "white",
steps = list(
list(range = c(sol.mn, sol.mx), color = "#EEE0D6")),
threshold = list(
line = list(color = "black", width = 1),
thickness = 0.75,
value = sol.av)
)
) %>%
layout(margin = list(l=15,r=30))
} else {
listofsols <- list(as.numeric(unique(mars.df$day)))
print(c("Please select one of the sol numbers from the last seven sols: " = listofsols))
}
}
runApp('~/Documents/UBC_MDS/block3/550/miniposter/maRs')
mars.df$day[1]
runApp('~/Documents/UBC_MDS/block3/550/miniposter/maRs')
getwd()
